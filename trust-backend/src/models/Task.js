import mongoose from 'mongoose';

const TaskSchema = new mongoose.Schema({
  tenantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Organization', required: true, index: true },
  
  // Related entities
  leadId: { type: mongoose.Schema.Types.ObjectId, ref: 'Lead', index: true },
  participantId: { type: mongoose.Schema.Types.ObjectId, ref: 'Participant', index: true },
  studyId: { type: mongoose.Schema.Types.ObjectId, ref: 'Study', index: true },
  siteId: { type: mongoose.Schema.Types.ObjectId, ref: 'Site', index: true },
  
  // Task details
  title: { type: String, required: true },
  description: String,
  type: { 
    type: String, 
    enum: ['follow_up', 'screening', 'consent', 'visit', 'documentation', 'communication', 'other'], 
    default: 'follow_up' 
  },
  priority: { type: String, enum: ['low', 'medium', 'high', 'urgent'], default: 'medium' },
  status: { type: String, enum: ['pending', 'in_progress', 'completed', 'cancelled'], default: 'pending' },
  
  // Assignment
  assignedTo: { type: mongoose.Schema.Types.ObjectId, ref: 'User', index: true },
  assignedBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  
  // Scheduling
  dueDate: Date,
  completedAt: Date,
  reminderAt: Date,
  
  // Workflow integration
  stage: String, // Lead stage when task was created
  autoGenerated: { type: Boolean, default: false }, // System-generated vs manual
  
  // Metadata
  tags: [String],
  notes: String,
  attachments: [{ name: String, url: String }],
  
  // Recurrence
  isRecurring: { type: Boolean, default: false },
  recurrencePattern: String, // 'daily', 'weekly', 'monthly'
  recurrenceInterval: Number, // Every N days/weeks/months
  recurrenceEndDate: Date
}, { timestamps: true });

// Indexes for efficient querying
TaskSchema.index({ tenantId: 1, assignedTo: 1, status: 1, dueDate: 1 });
TaskSchema.index({ tenantId: 1, leadId: 1, createdAt: -1 });
TaskSchema.index({ tenantId: 1, dueDate: 1, status: 1 });
TaskSchema.index({ tenantId: 1, reminderAt: 1 });

export default mongoose.model('Task', TaskSchema);